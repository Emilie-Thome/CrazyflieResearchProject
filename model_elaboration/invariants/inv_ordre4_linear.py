import numpy as np
from sympy import *
from sympy.abc import x, y, z, v, a, b



''' CONSTANTES DE LA DYNAMIQUE '''
g = 9.81
m = 0.028
k_1 = 2.130295*10**(-11)
k_2 = 1.032633*10**(-6)
k_3 = 5.484560*10**(-4)
scale = 1000
base = 36000
K_pz = 2
K_iz = 0.5
K_pv = 25
K_iv = 15
K_p = K_pv*scale
K_i = K_iv*scale

delta = (4*k_2)**2-16*k_1*(k_3-m*g)
pwm_e = (-4*k_2+np.sqrt(delta))/(8*k_1)


''' RAPPELS DE LA DYNAMIQUE LINÉAIRE
alpha = 8*pwm_e*k_1/m+4*k_2/m
A = np.array([[           0,          1,         0,             0],
			  [-2*K_p*alpha, -K_p*alpha, K_i*alpha, 0.5*K_p*alpha],
			  [          -2,         -1,         0,           0.5],
			  [          -1,          0,         0,             0]])
'''


''' CORRESPONDANCE ENTRE LES VARIABLES
z   -> z
vz  -> v
u1  -> x
u2  -> y
'''

# c = (8*k_1*pwm_e+4*k_2)/m  # = alpha
# a = -K_p*c
# b = K_i*c

dz  = Poly(v, z, v, x, y, domain='QQ[a, b]')
dvz = Poly(2*a*z+a*v+b*x-1/2*y, z, v, x, y, domain='QQ[a, b]')
du1 = Poly(-2*z-v+1/2*y, z, v, x, y, domain='QQ[a, b]')
du2 = Poly(-z, z, v, x, y, domain='QQ[a, b]')

inv = Poly(	b**2*(8*b**3*x**4-12*a*b**2*x**3*y-16*b**3*x**3*y+\
			6*a**2*b*x**2*y**2+16*a*b**2*x**2*y**2+4*b**3*x**2*y**2-\
			a**3*x*y**3-4*a**2*b*x*y**3-2*a*b**2*x*y**3+b**2*y**4+\
			8*a*b**2*x**3*v-8*a**2*b*x**2*y*v-16*b**2*x**2*y*v-\
			16*a*b**2*x**2*y*v+2*a**3*x*y**2*v+10*a*b*x*y**2*v+\
			8*a**2*b*x*y**2*v+24*b**2*x*y**2*v+4*a*b**2*x*y**2*v-\
			a**2*y**3*v-4*a*b*y**3*v-4*b**2*y**3*v-16*a*b*x**2*v**2+\
			8*b**2*x**2*v**2+8*a**2*x*y*v**2+16*a*b*x*y*v**2-\
			16*b**2*x*y*v**2+2*a**2*y**2*v**2+4*b*y**2*v**2+\
			8*a*b*y**2*v**2+4*b**2*y**2*v**2+4*a*x*v**3-16*b*x*v**3+\
			8*a*y*v**3+24*b*y*v**3+4*v**4+32*a*b**2*x**3*z+\
			16*b**3*x**3*z-32*a**2*b*x**2*y*z-72*a*b**2*x**2*y*z-\
			16*b**3*x**2*y*z+8*a**3*x*y**2*z+32*a**2*b*x*y**2*z+\
			8*b**2*x*y**2*z+16*a*b**2*x*y**2*z-a*b*y**3*z-\
			12*b**2*y**3*z-12*a*b*x**2*v*z+16*a**2*b*x**2*v*z+\
			48*b**2*x**2*v*z+16*a*b**2*x**2*v*z+6*a**2*x*y*v*z-\
			8*a**3*x*y*v*z-32*a*b*x*y*v*z-32*a**2*b*x*y*v*z-\
			112*b**2*x*y*v*z-16*a*b**2*x*y*v*z+8*a**2*y**2*v*z+\
			34*a*b*y**2*v*z+32*b**2*y**2*v*z-8*a**2*x*v**2*z-\
			16*b*x*v**2*z+16*b**2*x*v**2*z+6*a*y*v**2*z-\
			8*a**2*y*v**2*z+8*b*y*v**2*z-32*a*b*y*v**2*z-\
			16*b**2*y*v**2*z-8*a*v**3*z-16*b*v**3*z+36*a**2*b*x**2*z**2+\
			8*b**2*x**2*z**2+48*a*b**2*x**2*z**2+8*b**3*x**2*z**2-\
			18*a**3*x*y*z**2+2*a*b*x*y*z**2-72*a**2*b*x*y*z**2-\
			40*b**2*x*y*z**2-36*a*b**2*x*y*z**2+8*a*b*y**2*z**2+\
			50*b**2*y**2*z**2-8*a**2*x*v*z**2+4*a**3*x*v*z**2+\
			32*a*b*x*v*z**2+16*a**2*b*x*v*z**2+80*b**2*x*v*z**2+\
			8*a*b**2*x*v*z**2-18*a**2*y*v*z**2+8*b*y*v*z**2-\
			80*a*b*y*v*z**2-72*b**2*y*v*z**2-8*a*v**2*z**2+\
			4*a**2*v**2*z**2-12*b*v**2*z**2+16*a*b*v**2*z**2+\
			8*b**2*v**2*z**2+2*a**2*x*z**3+8*a**3*x*z**3+32*a**2*b*x*z**3+\
			40*b**2*x*z**3+16*a*b**2*x*z**3-18*a*b*y*z**3-80*b**2*y*z**3+\
			2*a*v*z**3+8*a**2*v*z**3-8*b*v*z**3+36*a*b*v*z**3+\
			32*b**2*v*z**3+2*b*z**4+8*a*b*z**4+32*b**2*z**4), z, v, x, y, domain='QQ[a, b]')
print("p(x(t)) = " + str(inv))

inv_dz  = inv.diff((0,1))
inv_dvz = inv.diff((1,1))
inv_du1 = inv.diff((2,1))
inv_du2 = inv.diff((3,1))
print("\nd(p(x(t)))/dt = " + str(inv_dz) + "*dz+" + str(inv_dvz) + "*dv+" + str(inv_du1) + "*dx+" + str(inv_du2) + "*dy")

inv_dt = (((dz.mul(inv_dz)).add(dvz.mul(inv_dvz))).add(du1.mul(inv_du1))).add(du2.mul(inv_du2))

inv_dt_dz  = inv_dt.diff((0,1))
inv_dt_dvz = inv_dt.diff((1,1))
inv_dt_du1 = inv_dt.diff((2,1))
inv_dt_du2 = inv_dt.diff((3,1))
print("\nd²(p(x(t)))/dt² = " + str(inv_dt_dz) + "*dz+" + str(inv_dt_dvz) + "*dv+" + str(inv_dt_du1) + "*dx+" + str(inv_dt_du2) + "*dy")

inv_dt_dt = (((dz.mul(inv_dt_dz)).add(dvz.mul(inv_dt_dvz))).add(du1.mul(inv_dt_du1))).add(du2.mul(inv_dt_du2))


'''
p(x(t)) = (8*a*b**3 + 32*b**4 + 2*b**3)*z**4 + (8*a**2*b**2 + 36*a*b**3 + 2*a*b**2 + 32*b**4 - 8*b**3)*z**3*v + (8*a**3*b**2 + 32*a**2*b**3 + 2*a**2*b**2 + 16*a*b**4 + 40*b**4)*z**3*x + (-18*a*b**3 - 80*b**4)*z**3*y + (4*a**2*b**2 + 16*a*b**3 - 8*a*b**2 + 8*b**4 - 12*b**3)*z**2*v**2 + (4*a**3*b**2 + 16*a**2*b**3 - 8*a**2*b**2 + 8*a*b**4 + 32*a*b**3 + 80*b**4)*z**2*v*x + (-18*a**2*b**2 - 80*a*b**3 - 72*b**4 + 8*b**3)*z**2*v*y + (36*a**2*b**3 + 48*a*b**4 + 8*b**5 + 8*b**4)*z**2*x**2 + (-18*a**3*b**2 - 72*a**2*b**3 - 36*a*b**4 + 2*a*b**3 - 40*b**4)*z**2*x*y + (8*a*b**3 + 50*b**4)*z**2*y**2 + (-8*a*b**2 - 16*b**3)*z*v**3 + (-8*a**2*b**2 + 16*b**4 - 16*b**3)*z*v**2*x + (-8*a**2*b**2 - 32*a*b**3 + 6*a*b**2 - 16*b**4 + 8*b**3)*z*v**2*y + (16*a**2*b**3 + 16*a*b**4 - 12*a*b**3 + 48*b**4)*z*v*x**2 + (-8*a**3*b**2 - 32*a**2*b**3 + 6*a**2*b**2 - 16*a*b**4 - 32*a*b**3 - 112*b**4)*z*v*x*y + (8*a**2*b**2 + 34*a*b**3 + 32*b**4)*z*v*y**2 + (32*a*b**4 + 16*b**5)*z*x**3 + (-32*a**2*b**3 - 72*a*b**4 - 16*b**5)*z*x**2*y + (8*a**3*b**2 + 32*a**2*b**3 + 16*a*b**4 + 8*b**4)*z*x*y**2 + (-a*b**3 - 12*b**4)*z*y**3 + 4*b**2*v**4 + (4*a*b**2 - 16*b**3)*v**3*x + (8*a*b**2 + 24*b**3)*v**3*y + (-16*a*b**3 + 8*b**4)*v**2*x**2 + (8*a**2*b**2 + 16*a*b**3 - 16*b**4)*v**2*x*y + (2*a**2*b**2 + 8*a*b**3 + 4*b**4 + 4*b**3)*v**2*y**2 + 8*a*b**4*v*x**3 + (-8*a**2*b**3 - 16*a*b**4 - 16*b**4)*v*x**2*y + (2*a**3*b**2 + 8*a**2*b**3 + 4*a*b**4 + 10*a*b**3 + 24*b**4)*v*x*y**2 + (-a**2*b**2 - 4*a*b**3 - 4*b**4)*v*y**3 + 8*b**5*x**4 + (-12*a*b**4 - 16*b**5)*x**3*y + (6*a**2*b**3 + 16*a*b**4 + 4*b**5)*x**2*y**2 + (-a**3*b**2 - 4*a**2*b**3 - 2*a*b**4)*x*y**3 + b**4*y**4

d(p(x(t)))/dt = ((32*a*b**3 + 128*b**4 + 8*b**3)*z**3 + (24*a**2*b**2 + 108*a*b**3 + 6*a*b**2 + 96*b**4 - 24*b**3)*z**2*v + (24*a**3*b**2 + 96*a**2*b**3 + 6*a**2*b**2 + 48*a*b**4 + 120*b**4)*z**2*x + (-54*a*b**3 - 240*b**4)*z**2*y + (8*a**2*b**2 + 32*a*b**3 - 16*a*b**2 + 16*b**4 - 24*b**3)*z*v**2 + (8*a**3*b**2 + 32*a**2*b**3 - 16*a**2*b**2 + 16*a*b**4 + 64*a*b**3 + 160*b**4)*z*v*x + (-36*a**2*b**2 - 160*a*b**3 - 144*b**4 + 16*b**3)*z*v*y + (72*a**2*b**3 + 96*a*b**4 + 16*b**5 + 16*b**4)*z*x**2 + (-36*a**3*b**2 - 144*a**2*b**3 - 72*a*b**4 + 4*a*b**3 - 80*b**4)*z*x*y + (16*a*b**3 + 100*b**4)*z*y**2 + (-8*a*b**2 - 16*b**3)*v**3 + (-8*a**2*b**2 + 16*b**4 - 16*b**3)*v**2*x + (-8*a**2*b**2 - 32*a*b**3 + 6*a*b**2 - 16*b**4 + 8*b**3)*v**2*y + (16*a**2*b**3 + 16*a*b**4 - 12*a*b**3 + 48*b**4)*v*x**2 + (-8*a**3*b**2 - 32*a**2*b**3 + 6*a**2*b**2 - 16*a*b**4 - 32*a*b**3 - 112*b**4)*v*x*y + (8*a**2*b**2 + 34*a*b**3 + 32*b**4)*v*y**2 + (32*a*b**4 + 16*b**5)*x**3 + (-32*a**2*b**3 - 72*a*b**4 - 16*b**5)*x**2*y + (8*a**3*b**2 + 32*a**2*b**3 + 16*a*b**4 + 8*b**4)*x*y**2 + (-a*b**3 - 12*b**4)*y**3)*dz+((8*a**2*b**2 + 36*a*b**3 + 2*a*b**2 + 32*b**4 - 8*b**3)*z**3 + (8*a**2*b**2 + 32*a*b**3 - 16*a*b**2 + 16*b**4 - 24*b**3)*z**2*v + (4*a**3*b**2 + 16*a**2*b**3 - 8*a**2*b**2 + 8*a*b**4 + 32*a*b**3 + 80*b**4)*z**2*x + (-18*a**2*b**2 - 80*a*b**3 - 72*b**4 + 8*b**3)*z**2*y + (-24*a*b**2 - 48*b**3)*z*v**2 + (-16*a**2*b**2 + 32*b**4 - 32*b**3)*z*v*x + (-16*a**2*b**2 - 64*a*b**3 + 12*a*b**2 - 32*b**4 + 16*b**3)*z*v*y + (16*a**2*b**3 + 16*a*b**4 - 12*a*b**3 + 48*b**4)*z*x**2 + (-8*a**3*b**2 - 32*a**2*b**3 + 6*a**2*b**2 - 16*a*b**4 - 32*a*b**3 - 112*b**4)*z*x*y + (8*a**2*b**2 + 34*a*b**3 + 32*b**4)*z*y**2 + 16*b**2*v**3 + (12*a*b**2 - 48*b**3)*v**2*x + (24*a*b**2 + 72*b**3)*v**2*y + (-32*a*b**3 + 16*b**4)*v*x**2 + (16*a**2*b**2 + 32*a*b**3 - 32*b**4)*v*x*y + (4*a**2*b**2 + 16*a*b**3 + 8*b**4 + 8*b**3)*v*y**2 + 8*a*b**4*x**3 + (-8*a**2*b**3 - 16*a*b**4 - 16*b**4)*x**2*y + (2*a**3*b**2 + 8*a**2*b**3 + 4*a*b**4 + 10*a*b**3 + 24*b**4)*x*y**2 + (-a**2*b**2 - 4*a*b**3 - 4*b**4)*y**3)*dv+((8*a**3*b**2 + 32*a**2*b**3 + 2*a**2*b**2 + 16*a*b**4 + 40*b**4)*z**3 + (4*a**3*b**2 + 16*a**2*b**3 - 8*a**2*b**2 + 8*a*b**4 + 32*a*b**3 + 80*b**4)*z**2*v + (72*a**2*b**3 + 96*a*b**4 + 16*b**5 + 16*b**4)*z**2*x + (-18*a**3*b**2 - 72*a**2*b**3 - 36*a*b**4 + 2*a*b**3 - 40*b**4)*z**2*y + (-8*a**2*b**2 + 16*b**4 - 16*b**3)*z*v**2 + (32*a**2*b**3 + 32*a*b**4 - 24*a*b**3 + 96*b**4)*z*v*x + (-8*a**3*b**2 - 32*a**2*b**3 + 6*a**2*b**2 - 16*a*b**4 - 32*a*b**3 - 112*b**4)*z*v*y + (96*a*b**4 + 48*b**5)*z*x**2 + (-64*a**2*b**3 - 144*a*b**4 - 32*b**5)*z*x*y + (8*a**3*b**2 + 32*a**2*b**3 + 16*a*b**4 + 8*b**4)*z*y**2 + (4*a*b**2 - 16*b**3)*v**3 + (-32*a*b**3 + 16*b**4)*v**2*x + (8*a**2*b**2 + 16*a*b**3 - 16*b**4)*v**2*y + 24*a*b**4*v*x**2 + (-16*a**2*b**3 - 32*a*b**4 - 32*b**4)*v*x*y + (2*a**3*b**2 + 8*a**2*b**3 + 4*a*b**4 + 10*a*b**3 + 24*b**4)*v*y**2 + 32*b**5*x**3 + (-36*a*b**4 - 48*b**5)*x**2*y + (12*a**2*b**3 + 32*a*b**4 + 8*b**5)*x*y**2 + (-a**3*b**2 - 4*a**2*b**3 - 2*a*b**4)*y**3)*dx+((-18*a*b**3 - 80*b**4)*z**3 + (-18*a**2*b**2 - 80*a*b**3 - 72*b**4 + 8*b**3)*z**2*v + (-18*a**3*b**2 - 72*a**2*b**3 - 36*a*b**4 + 2*a*b**3 - 40*b**4)*z**2*x + (16*a*b**3 + 100*b**4)*z**2*y + (-8*a**2*b**2 - 32*a*b**3 + 6*a*b**2 - 16*b**4 + 8*b**3)*z*v**2 + (-8*a**3*b**2 - 32*a**2*b**3 + 6*a**2*b**2 - 16*a*b**4 - 32*a*b**3 - 112*b**4)*z*v*x + (16*a**2*b**2 + 68*a*b**3 + 64*b**4)*z*v*y + (-32*a**2*b**3 - 72*a*b**4 - 16*b**5)*z*x**2 + (16*a**3*b**2 + 64*a**2*b**3 + 32*a*b**4 + 16*b**4)*z*x*y + (-3*a*b**3 - 36*b**4)*z*y**2 + (8*a*b**2 + 24*b**3)*v**3 + (8*a**2*b**2 + 16*a*b**3 - 16*b**4)*v**2*x + (4*a**2*b**2 + 16*a*b**3 + 8*b**4 + 8*b**3)*v**2*y + (-8*a**2*b**3 - 16*a*b**4 - 16*b**4)*v*x**2 + (4*a**3*b**2 + 16*a**2*b**3 + 8*a*b**4 + 20*a*b**3 + 48*b**4)*v*x*y + (-3*a**2*b**2 - 12*a*b**3 - 12*b**4)*v*y**2 + (-12*a*b**4 - 16*b**5)*x**3 + (12*a**2*b**3 + 32*a*b**4 + 8*b**5)*x**2*y + (-3*a**3*b**2 - 12*a**2*b**3 - 6*a*b**4)*x*y**2 + 4*b**4*y**3)*dy

d²(p(x(t)))/dt² = ((32*a**2*b**3 + 128*a*b**4 + 8*a*b**3)*z**3 + (24*a**3*b**2 + 108*a**2*b**3 + 6*a**2*b**2 + 96*a*b**4 - 24*a*b**3)*z**2*v + (24*a**4*b**2 + 96*a**3*b**3 + 6*a**3*b**2 + 48*a**2*b**4 + 120*a*b**4)*z**2*x + (12*a**3*b**2 - 9*a**2*b**2 - 192*a*b**4 - 66*a*b**3 - 3*a*b**2 - 48*b**4 + 12*b**3)*z**2*y + (8*a**3*b**2 + 32*a**2*b**3 - 16*a**2*b**2 + 16*a*b**4 - 24*a*b**3)*z*v**2 + (8*a**4*b**2 + 32*a**3*b**3 - 16*a**3*b**2 + 16*a**2*b**4 + 64*a**2*b**3 + 160*a*b**4)*z*v*x + (-28*a**3*b**2 - 128*a**2*b**3 - 24*a**2*b**2 - 128*a*b**4 - 40*a*b**3 + 16*a*b**2 - 16*b**4 + 24*b**3)*z*v*y + (72*a**3*b**3 + 96*a**2*b**4 + 16*a*b**5 + 16*a*b**4)*z*x**2 + (-32*a**4*b**2 - 128*a**3*b**3 - 12*a**3*b**2 - 64*a**2*b**4 + 20*a**2*b**3 + 8*a**2*b**2 - 8*a*b**4 - 32*a*b**3 - 80*b**4)*z*x*y + (-18*a**3*b**2 - 64*a**2*b**3 + 18*a**2*b**2 + 28*a*b**4 + 88*a*b**3 + 72*b**4 - 8*b**3)*z*y**2 + (-8*a**2*b**2 - 16*a*b**3)*v**3 + (-8*a**3*b**2 + 16*a*b**4 - 16*a*b**3)*v**2*x + (-8*a**3*b**2 - 32*a**2*b**3 - 6*a**2*b**2 - 16*a*b**4 - 16*a*b**3 + 12*a*b**2 + 24*b**3)*v**2*y + (16*a**3*b**3 + 16*a**2*b**4 - 12*a**2*b**3 + 48*a*b**4)*v*x**2 + (-8*a**4*b**2 - 32*a**3*b**3 - 2*a**3*b**2 - 16*a**2*b**4 - 32*a**2*b**3 + 8*a**2*b**2 - 96*a*b**4 - 16*a*b**3 - 16*b**4 + 16*b**3)*v*x*y + (2*a**2*b**3 + 14*a**2*b**2 + 16*a*b**4 + 40*a*b**3 - 6*a*b**2 + 16*b**4 - 8*b**3)*v*y**2 + (32*a**2*b**4 + 16*a*b**5)*x**3 + (-24*a**3*b**3 - 64*a**2*b**4 - 14*a**2*b**3 - 16*a*b**5 + 16*a*b**4 + 6*a*b**3 - 24*b**4)*x**2*y + (4*a**4*b**2 + 16*a**3*b**3 + 7*a**3*b**2 + 8*a**2*b**4 - 3*a**2*b**2 - 40*a*b**4 + 16*a*b**3 + 56*b**4)*x*y**2 + (4*a**3*b**2 + 16*a**2*b**3 - 4*a**2*b**2 + 4*a*b**4 - 17*a*b**3 - 16*b**4)*y**3)*dz+((8*a**3*b**2 + 36*a**2*b**3 + 2*a**2*b**2 + 32*a*b**4 - 8*a*b**3)*z**3 + (8*a**3*b**2 + 32*a**2*b**3 - 16*a**2*b**2 + 16*a*b**4 - 24*a*b**3)*z**2*v + (4*a**4*b**2 + 16*a**3*b**3 - 8*a**3*b**2 + 8*a**2*b**4 + 32*a**2*b**3 + 80*a*b**4)*z**2*x + (-14*a**3*b**2 - 64*a**2*b**3 - 12*a**2*b**2 - 64*a*b**4 - 20*a*b**3 + 8*a*b**2 - 8*b**4 + 12*b**3)*z**2*y + (-24*a**2*b**2 - 48*a*b**3)*z*v**2 + (-16*a**3*b**2 + 32*a*b**4 - 32*a*b**3)*z*v*x + (-16*a**3*b**2 - 64*a**2*b**3 - 12*a**2*b**2 - 32*a*b**4 - 32*a*b**3 + 24*a*b**2 + 48*b**3)*z*v*y + (16*a**3*b**3 + 16*a**2*b**4 - 12*a**2*b**3 + 48*a*b**4)*z*x**2 + (-8*a**4*b**2 - 32*a**3*b**3 - 2*a**3*b**2 - 16*a**2*b**4 - 32*a**2*b**3 + 8*a**2*b**2 - 96*a*b**4 - 16*a*b**3 - 16*b**4 + 16*b**3)*z*x*y + (2*a**2*b**3 + 14*a**2*b**2 + 16*a*b**4 + 40*a*b**3 - 6*a*b**2 + 16*b**4 - 8*b**3)*z*y**2 + 16*a*b**2*v**3 + (12*a**2*b**2 - 48*a*b**3)*v**2*x + (24*a**2*b**2 + 72*a*b**3 + 24*a*b**2 - 24*b**2)*v**2*y + (-32*a**2*b**3 + 16*a*b**4)*v*x**2 + (16*a**3*b**2 + 32*a**2*b**3 + 12*a**2*b**2 - 32*a*b**4 - 48*a*b**3 - 12*a*b**2 + 48*b**3)*v*x*y + (4*a**3*b**2 + 16*a**2*b**3 + 24*a**2*b**2 + 8*a*b**4 + 80*a*b**3 - 24*a*b**2 - 72*b**3)*v*y**2 + 8*a**2*b**4*x**3 + (-8*a**3*b**3 - 16*a**2*b**4 - 16*a**2*b**3 - 8*a*b**4 + 16*a*b**3 - 8*b**4)*x**2*y + (2*a**4*b**2 + 8*a**3*b**3 + 8*a**3*b**2 + 4*a**2*b**4 + 26*a**2*b**3 - 8*a**2*b**2 + 8*a*b**4 - 16*a*b**3 + 16*b**4)*x*y**2 + (a**3*b**2 + 4*a**2*b**3 - 2*a**2*b**2 - 4*a*b**3 - 4*b**4 - 4*b**3)*y**3)*dv+((8*a**4*b**2 + 32*a**3*b**3 + 2*a**3*b**2 + 16*a**2*b**4 + 40*a*b**4)*z**3 + (4*a**4*b**2 + 16*a**3*b**3 - 8*a**3*b**2 + 8*a**2*b**4 + 32*a**2*b**3 + 80*a*b**4)*z**2*v + (72*a**3*b**3 + 96*a**2*b**4 + 16*a*b**5 + 16*a*b**4)*z**2*x + (-16*a**4*b**2 - 64*a**3*b**3 - 6*a**3*b**2 - 32*a**2*b**4 + 10*a**2*b**3 + 4*a**2*b**2 - 4*a*b**4 - 16*a*b**3 - 40*b**4)*z**2*y + (-8*a**3*b**2 + 16*a*b**4 - 16*a*b**3)*z*v**2 + (32*a**3*b**3 + 32*a**2*b**4 - 24*a**2*b**3 + 96*a*b**4)*z*v*x + (-8*a**4*b**2 - 32*a**3*b**3 - 2*a**3*b**2 - 16*a**2*b**4 - 32*a**2*b**3 + 8*a**2*b**2 - 96*a*b**4 - 16*a*b**3 - 16*b**4 + 16*b**3)*z*v*y + (96*a**2*b**4 + 48*a*b**5)*z*x**2 + (-48*a**3*b**3 - 128*a**2*b**4 - 28*a**2*b**3 - 32*a*b**5 + 32*a*b**4 + 12*a*b**3 - 48*b**4)*z*x*y + (4*a**4*b**2 + 16*a**3*b**3 + 7*a**3*b**2 + 8*a**2*b**4 - 3*a**2*b**2 - 40*a*b**4 + 16*a*b**3 + 56*b**4)*z*y**2 + (4*a**2*b**2 - 16*a*b**3)*v**3 + (-32*a**2*b**3 + 16*a*b**4)*v**2*x + (8*a**3*b**2 + 16*a**2*b**3 + 6*a**2*b**2 - 16*a*b**4 - 24*a*b**3 - 6*a*b**2 + 24*b**3)*v**2*y + 24*a**2*b**4*v*x**2 + (-16*a**3*b**3 - 32*a**2*b**4 - 32*a**2*b**3 - 16*a*b**4 + 32*a*b**3 - 16*b**4)*v*x*y + (2*a**4*b**2 + 8*a**3*b**3 + 8*a**3*b**2 + 4*a**2*b**4 + 26*a**2*b**3 - 8*a**2*b**2 + 8*a*b**4 - 16*a*b**3 + 16*b**4)*v*y**2 + 32*a*b**5*x**3 + (-24*a**2*b**4 - 48*a*b**5 - 12*a*b**4)*x**2*y + (4*a**3*b**3 + 16*a**2*b**4 + 8*a**2*b**3 + 8*a*b**5 + 16*b**4)*x*y**2 + (-a**3*b**2 + a**2*b**3 + 10*a*b**4 - 5*a*b**3 - 12*b**4)*y**3)*dx+((4*a**3*b**2 - 3*a**2*b**2 - 64*a*b**4 - 22*a*b**3 - a*b**2 - 16*b**4 + 4*b**3)*z**3 + (-14*a**3*b**2 - 64*a**2*b**3 - 12*a**2*b**2 - 64*a*b**4 - 20*a*b**3 + 8*a*b**2 - 8*b**4 + 12*b**3)*z**2*v + (-16*a**4*b**2 - 64*a**3*b**3 - 6*a**3*b**2 - 32*a**2*b**4 + 10*a**2*b**3 + 4*a**2*b**2 - 4*a*b**4 - 16*a*b**3 - 40*b**4)*z**2*x + (-18*a**3*b**2 - 64*a**2*b**3 + 18*a**2*b**2 + 28*a*b**4 + 88*a*b**3 + 72*b**4 - 8*b**3)*z**2*y + (-8*a**3*b**2 - 32*a**2*b**3 - 6*a**2*b**2 - 16*a*b**4 - 16*a*b**3 + 12*a*b**2 + 24*b**3)*z*v**2 + (-8*a**4*b**2 - 32*a**3*b**3 - 2*a**3*b**2 - 16*a**2*b**4 - 32*a**2*b**3 + 8*a**2*b**2 - 96*a*b**4 - 16*a*b**3 - 16*b**4 + 16*b**3)*z*v*x + (4*a**2*b**3 + 28*a**2*b**2 + 32*a*b**4 + 80*a*b**3 - 12*a*b**2 + 32*b**4 - 16*b**3)*z*v*y + (-24*a**3*b**3 - 64*a**2*b**4 - 14*a**2*b**3 - 16*a*b**5 + 16*a*b**4 + 6*a*b**3 - 24*b**4)*z*x**2 + (8*a**4*b**2 + 32*a**3*b**3 + 14*a**3*b**2 + 16*a**2*b**4 - 6*a**2*b**2 - 80*a*b**4 + 32*a*b**3 + 112*b**4)*z*x*y + (12*a**3*b**2 + 48*a**2*b**3 - 12*a**2*b**2 + 12*a*b**4 - 51*a*b**3 - 48*b**4)*z*y**2 + (8*a**2*b**2 + 24*a*b**3 + 8*a*b**2 - 8*b**2)*v**3 + (8*a**3*b**2 + 16*a**2*b**3 + 6*a**2*b**2 - 16*a*b**4 - 24*a*b**3 - 6*a*b**2 + 24*b**3)*v**2*x + (4*a**3*b**2 + 16*a**2*b**3 + 24*a**2*b**2 + 8*a*b**4 + 80*a*b**3 - 24*a*b**2 - 72*b**3)*v**2*y + (-8*a**3*b**3 - 16*a**2*b**4 - 16*a**2*b**3 - 8*a*b**4 + 16*a*b**3 - 8*b**4)*v*x**2 + (4*a**4*b**2 + 16*a**3*b**3 + 16*a**3*b**2 + 8*a**2*b**4 + 52*a**2*b**3 - 16*a**2*b**2 + 16*a*b**4 - 32*a*b**3 + 32*b**4)*v*x*y + (3*a**3*b**2 + 12*a**2*b**3 - 6*a**2*b**2 - 12*a*b**3 - 12*b**4 - 12*b**3)*v*y**2 + (-8*a**2*b**4 - 16*a*b**5 - 4*a*b**4)*x**3 + (4*a**3*b**3 + 16*a**2*b**4 + 8*a**2*b**3 + 8*a*b**5 + 16*b**4)*x**2*y + (-3*a**3*b**2 + 3*a**2*b**3 + 30*a*b**4 - 15*a*b**3 - 36*b**4)*x*y**2 + (-2*a**3*b**2 - 8*a**2*b**3 + 2*a**2*b**2 - 4*a*b**4 + 8*a*b**3 + 8*b**4)*y**3)*dy
'''